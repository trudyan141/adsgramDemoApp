name: Deploy to Amazon ECS on prod

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-south-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: web_sdk         # set this to your Amazon ECR repository name
  ECS_SERVICE: web_sdk                # set this to your Amazon ECS service name
  ECS_CLUSTER: prod                 # set this to your Amazon ECS cluster name

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::539247467867:role/prod_dmtp-sdk_github
        role-session-name: prod-runner
        aws-region: ap-south-1 

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: main
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        aws s3 cp s3://dmtp-sdk-env-mumbai/web_sdk/.env.prod.local ./
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Force deployment
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }}  --force-new-deployment
    
    - name: Wait
      run: |
        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }}
